"""add ec2_subnet table

Revision ID: 89a2cf1d3255
Revises: 15d8a6b81095
Create Date: 2024-05-17 14:59:06.151233

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import orm
from mash.services.database.extensions import db
from mash.services.database.models import (
    EC2Account,
    EC2Subnet
)
from mash.services.database.extensions import db

# revision identifiers, used by Alembic.
revision = '89a2cf1d3255'
down_revision = '15d8a6b81095'
branch_labels = None
depends_on = None


def upgrade():

    # ### commands auto generated by Alembic - please adjust! ###
    ec2_subnet_table = op.create_table('ec2_subnet',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('region', sa.String(length=32), nullable=False),
        sa.Column('subnet', sa.String(length=32), nullable=True),
        sa.Column('account_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['account_id'], ['ec2_account.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    # migrate the subnet data into the new ec2_subnet table
    # Request all of the old info.
    conn = op.get_bind()
    res = conn.execute(sa.text("select id, region, subnet from ec2_account"))
    results = res.fetchall()

    # Prepare the object to insert into the new ec2_subnet table.
    subnets_info = [
        {
            'account_id': r[0],
            'region': r[1],
            'subnet': r[2]
        } for r in results
    ]

    # Insert subnets_info into new table.
    op.bulk_insert(ec2_subnet_table, subnets_info)

    # drop the subnet column in ec2_account table
    with op.batch_alter_table('ec2_account', schema=None) as batch_op:
        batch_op.drop_column('subnet')

    # ### end Alembic commands ###


def downgrade():
    bind = op.get_bind()
    session = orm.Session(bind=bind)

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('ec2_account', schema=None) as batch_op:
        batch_op.add_column(sa.Column('subnet', sa.VARCHAR(length=32), autoincrement=False, nullable=True))


    # downgrade migrate data
    conn = op.get_bind()
    res = conn.execute(sa.text("select id, region from ec2_account"))
    results = res.fetchall()
    for r in results:
        account_id = r[0]
        region = r[1]
        subnet = get_subnet_for_ec2_account_and_region(
            conn,
            account_id,
            region
        )
        insert_subnet_in_ec2_account(
            conn,
            account_id,
            subnet
        )


    # drop ec2_subnet table
    op.drop_table('ec2_subnet')
    # ### end Alembic commands ###


def get_subnet_for_ec2_account_and_region(conn, account_id, region):
    '''Migrates the data to the new table on upgrade'''
    query = (
        'SELECT id, subnet '
        ' FROM ec2_subnet '
        ' WHERE account_id={account_id}'
        f" and region='{region}'"
    )

    res = conn.execute(sa.text(query))
    results = res.fetchall()
    for r in results:
        return r[1]

    return ''


def insert_subnet_in_ec2_account(conn, account_id, subnet):
    if subnet is None:
        subnet=''
    query = (
        'UPDATE ec2_account'
        f" SET subnet='{subnet}'"
        f' WHERE id={account_id}'
    )
    res = conn.execute(sa.text(query))
    return subnet
